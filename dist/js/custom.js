window.onload=()=>{$("select").length&&($("select").selectric({onInit:e=>{if($(e).closest(".js-select-multiple-item").length>0){const t='<div class="selectric-btns">\n                                    <button class="selectric-btn js-apply-filter" type="button">Применить</button>\n                                    <button class="selectric-btn js-cancel-filter" type="button">Сбросить</button>\n                                 </div>';$(e).closest(".js-select-multiple-item").find(".selectric-items").append(t)}}}),$(".js-apply-filter").on("click",(e=>{console.log("e - ",e)})),$(".js-cancel-filter").on("click",(e=>{console.log("e - ",e)}))),(()=>{const e=document.querySelectorAll(".js-humburger"),t=document.querySelector(".js-popup-main");for(let s=0;s<e.length;s++)e[s].addEventListener("click",(e=>{t.classList.toggle("active"),e.currentTarget.classList.toggle("active"),document.body.classList.toggle("modal-open");let s=0;if(window.matchMedia("(max-width:767px)").matches){s=document.querySelector(".js-header-top").offsetHeight+document.querySelector(".js-header-bottom").offsetHeight-document.querySelector(".js-bottom-nav").offsetHeight+16}else s=document.querySelector(".js-header").offsetHeight;t.style.top=`${s}px`,window.scrollTo(0,0)}))})(),(()=>{const e=document.querySelectorAll(".js-account-toggle-btn");for(let t=0;t<e.length;t++)e[t].addEventListener("click",(e=>{e.currentTarget.classList.toggle("js-active"),e.currentTarget.closest(".js-account-toggle-wrap").querySelector(".js-account-toggle-nav").classList.toggle("js-active")}))})(),(()=>{const e=document.querySelectorAll(".js-tabs");for(let t=0;t<e.length;t++){const s=e[t].querySelectorAll(".js-tab"),o=e[t].querySelectorAll(".js-tabs-content");for(let e=0;e<s.length;e++)0==e?s[e].classList.add("active"):s[e].classList.remove("active"),s[e].addEventListener("click",(t=>{const l=e;for(let e=0;e<s.length;e++)s[e].classList.remove("active");s[l].classList.add("active");for(let e=0;e<o.length;e++)o[e].classList.remove("active");o[l].classList.add("active")}));for(let e=0;e<o.length;e++)0==e?o[e].classList.add("active"):o[e].classList.remove("active")}})(),(()=>{const e=document.querySelectorAll(".js-popup-menu-btn"),t=document.querySelectorAll(".js-popup-menu-list");for(let s=0;s<e.length;s++)e[s].addEventListener("click",(e=>{const s=e.currentTarget.closest(".js-popup-menu");for(let e=0;e<t.length;e++)t[e].classList.remove("active");s.querySelector(".js-popup-menu-list").classList.add("active")}))})(),(()=>{const e=document.querySelectorAll(".js-signin"),t=document.querySelector(".js-signin-close"),s=document.querySelector(".js-popup-signin");for(let t=0;t<e.length;t++)e[t].addEventListener("click",(e=>{s.classList.add("active"),document.body.classList.add("modal-open")}));t.addEventListener("click",(e=>{s.classList.remove("active"),document.body.classList.remove("modal-open")}))})(),$(".js-top-news-slider").slick({slidesToShow:1,slidesToScroll:1,arrows:!1,fade:!0,asNavFor:".js-top-news-slider-nav"}),$(".js-top-news-slider-nav").slick({slidesToShow:3,slidesToScroll:1,vertical:!0,asNavFor:".js-top-news-slider",dots:!1,focusOnSelect:!0,verticalSwiping:!0,responsive:[{breakpoint:767,settings:{vertical:!1}}]}),$(".js-slider-primary").each(((e,t)=>{let s=$(t).closest(".js-has-slider").find(".js-slider-arrow-prev"),o=$(t).closest(".js-has-slider").find(".js-slider-arrow-next");$(t).slick({autoplay:!1,dots:!1,adaptiveHeight:!0,nextArrow:o,prevArrow:s,slidesToShow:4,responsive:[{breakpoint:1581,settings:{slidesToShow:3}},{breakpoint:767,settings:{slidesToShow:1}}]}).on("setPosition",(function(e,t){t.$slides.css("height",t.$slideTrack.height()+"px")}))})),$(".js-slider-secondary").each(((e,t)=>{let s=$(t).closest(".js-has-slider").find(".js-slider-arrow-prev"),o=$(t).closest(".js-has-slider").find(".js-slider-arrow-next");$(t).slick({autoplay:!1,dots:!1,adaptiveHeight:!0,nextArrow:o,prevArrow:s,slidesToShow:3,vertical:!0,responsive:[{breakpoint:1581,settings:{slidesToShow:3,vertical:!1}},{breakpoint:767,settings:{slidesToShow:1,vertical:!1}}]})})),$(".js-slider-blog-home").each(((e,t)=>{let s=$(t).closest(".js-has-slider").find(".js-slider-arrow-prev"),o=$(t).closest(".js-has-slider").find(".js-slider-arrow-next");$(t).slick({autoplay:!1,dots:!1,adaptiveHeight:!0,nextArrow:o,prevArrow:s,slidesToShow:4,responsive:[{breakpoint:1581,settings:{slidesToShow:3}},{breakpoint:1185,settings:{slidesToShow:2}},{breakpoint:767,settings:{slidesToShow:1}}]}).on("setPosition",(function(e,t){t.$slides.css("height",t.$slideTrack.height()+"px")}))})),function(e){"use strict";"function"==typeof define&&define.amd?define(["../widgets/datepicker"],e):e(jQuery.datepicker)}((function(e){"use strict";return e.regional.ru={closeText:"Закрыть",prevText:"‹",nextText:"›",currentText:"Сегодня",monthNames:["Январь","Февраль","Март","Апрель","Май","Июнь","Июль","Август","Сентябрь","Октябрь","Ноябрь","Декабрь"],monthNamesShort:["Янв","Фев","Мар","Апр","Май","Июн","Июл","Авг","Сен","Окт","Ноя","Дек"],dayNames:["воскресенье","понедельник","вторник","среда","четверг","пятница","суббота"],dayNamesShort:["вск","пнд","втр","срд","чтв","птн","сбт"],dayNamesMin:["Вс","Пн","Вт","Ср","Чт","Пт","Сб"],weekHeader:"Нед",dateFormat:"dd.mm.yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""},e.setDefaults(e.regional.ru),e.regional.ru})),$.datepicker.setDefaults($.datepicker.regional.ru),$(".js-datepicker").datepicker()};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
